<%= erb :_user %>

<p><a href="/">home</a></p>

<h1>Create a Net</h1>

<p>
  You are about to start a net. Only do this if you absolutely know what you are doing.
  If you are trying to participate in a net or join a net, this is not where you do that.
  Instead, go back <a href="/">home</a> and find the net there. If it's not there, then
  whoever is responsible for running and/or logging the net hasn't started it yet.
</p>

<p>
  <strong>Do not continue unless you are a person in charge of this net!</strong>
</p>

<div id="form" data-props="<%= { net_control: @user.call_sign }.to_json.gsub('"', '&quot;') %>"></div>

<script type="module">
  import { h, render, Component } from 'https://esm.sh/preact';
  import htm from 'https://esm.sh/htm';

  const html = htm.bind(h);

  class Form extends Component {
    state = {
      name: '',
      password: '',
      frequency: '',
      band: '',
      mode: '',
      net_control: this.props.net_control,
      errors: {}
    }

    guessStuffFromFrequency(frequencyValue) {
      const freq = parseFloat(frequencyValue)
      if (freq == 0.0) return

      let band = ''
      if (freq >= 420.0 && freq <= 450.0) band = '70cm'
      else if (freq >= 219.0 && freq <= 225.0) band = '1.25cm'
      else if (freq >= 144.0 && freq <= 148.0) band = '2m'
      else if (freq >= 50.0 && freq <= 54.0) band = '6m'
      else if (freq >= 28.0 && freq <= 29.7) band = '10m'
      else if (freq >= 24.89 && freq <= 24.99) band = '12m'
      else if (freq >= 21.0 && freq <= 21.45) band = '15m'
      else if (freq >= 14.0 && freq <= 14.35) band = '20m'
      else if (freq >= 10.1 && freq <= 10.150) band = '30m'
      else if (freq >= 7.0 && freq <= 7.3) band = '40m'
      else if (freq >= 3.5 && freq <= 4.0) band = '80m'
      else if (freq >= 1.8 && freq <= 2.0) band = '160m'
      if (band != '')
        this.setState({ band })

      let mode = ''
      if (band === '70cm') {
        if (freq == 446.0) mode = 'FM'
      } else if (band === '2m') {
        if (freq >= 145.20 && freq <= 145.50) mode = 'FM'
        else if (freq >= 146.40 && freq <= 146.58) mode = 'FM'
        else if (freq >= 147.42 && freq <= 147.57) mode = 'FM'
        else if (freq >= 144.200 && freq <= 144.275) mode = 'SSB'
      }
      if (mode !== '')
        this.setState({ mode })
    }

    requiredFields = ['name', 'password', 'frequency', 'band', 'mode', 'net_control']

    handleSubmit(e) {
      const errors = {}
      for (let i=0; i<this.requiredFields.length; i++) {
        const key = this.requiredFields[i]
        const value = this.state[key]
        if (value.trim().length === 0)
          errors[key] = true
      }
      this.setState({ errors })
      if (Object.keys(errors).length > 0)
        e.preventDefault()
    }

    render() {
      return html`
        <form action="/create-net" method="POST" onsubmit=${(e) => this.handleSubmit(e)}>
          <label class="${this.state.errors.name ? 'error' : ''}">
            Name of Net:<br/>
            <input name="name"
              value=${this.state.name}
              onchange=${(e) => this.setState({ name: e.target.value })}
            />
          </label>
          <label class="${this.state.errors.password ? 'error' : ''}">
            Password (share this with another person to allow handing off logging responsibility):<br/>
            <input type="password"
              name="password"
              placeholder="something secure"
              value=${this.state.password}
              onchange=${(e) => this.setState({ password: e.target.value })}/>
          </label>
          <label class="${this.state.errors.frequency ? 'error' : ''}">
            Frequency in MHz:<br/>
            <input id="frequency"
              name="frequency"
              placeholder="146.52"
              value=${this.state.frequency}
              onkeyup=${(e) => {
                this.setState({ frequency: e.target.value })
                this.guessStuffFromFrequency(e.target.value)
              }}/>
          </label>
          <label class="${this.state.errors.band ? 'error' : ''}">
            Band:<br/>
            <select id="band" name="band" value=${this.state.band} onchange=${(e) => this.setState({ band: e.target.value })}>
              <option value=""></option>
              <option>70cm</option>
              <option>1.25m</option>
              <option>2m</option>
              <option>6m</option>
              <option>10m</option>
              <option>12m</option>
              <option>15m</option>
              <option>17m</option>
              <option>20m</option>
              <option>30m</option>
              <option>40m</option>
              <option>60m</option>
              <option>80m</option>
              <option>160m</option>
              <option>(Custom)</option>
            </select><br/>
            ${this.state.band == '(Custom)' && html`
              <input name="band" placeholder="Band"/>
            `}
          </label>
          <label class="${this.state.errors.mode ? 'error' : ''}">
            Mode:<br/>
            <select id="mode" name="mode" value=${this.state.mode} onchange=${(e) => this.setState({ mode: e.target.value })}>
              <option value=""></option>
              <option>SSB</option>
              <option>AM</option>
              <option>FM</option>
              <option>CW</option>
              <option>DIGITAL</option>
              <option>(Custom)</option>
            </select><br/>
            ${this.state.mode == '(Custom)' && html`
              <input name="mode" placeholder="Mode"/>
            `}
          </label>
          <label class="${this.state.errors.net_control ? 'error' : ''}">
            Net Control:<br/>
            <input name="net_control"
              value=${this.state.net_control}
              onchange=${(e) => this.setState({ net_control: e.target.value })}
              placeholder="KI5ZDF"/>
          </label>
          <input type="submit" value="START NET NOW"/>
        </form>
      `
    }
  }

  class FormTrigger extends Component {
    state = { formVisible: false }

    render() {
      return html`
        <p>
          <input id="understand" type="checkbox" onclick=${() => this.setState({ formVisible: !this.state.formVisible })}/>
          <label for="understand">I understand, please let me start a net.</label>
        </p>

        ${this.state.formVisible ? h(Form, this.props) : null}
      `
    }
  }

  const elm = document.getElementById('form')
  const props = JSON.parse(elm.getAttribute('data-props'))
  render(html`<${FormTrigger} ...${props}/>`, elm);
</script>
