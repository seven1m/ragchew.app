<h1>User: <%== @user_to_edit.call_sign %></h1>

<p>
  <button id="qrz-lookup-btn" onclick="lookupQrz()">Get from QRZ</button>
  <span id="qrz-loading" style="display: none; margin-left: 10px; font-style: italic;">Loading...</span>
</p>

<div id="qrz-info" style="display: none; margin: 20px 0; padding: 15px; border: 1px solid #ddd; background-color: #f9f9f9;">
  <div id="qrz-content"></div>
</div>

<dl>
  <dt>First name:</dt>
  <dd><%== @user_to_edit.first_name %></dd>
  <dt>Last name:</dt>
  <dd><%== @user_to_edit.last_name %></dd>
  <dt>Image URL:</dt>
  <dd>
    <% if @user_to_edit.image.present? %>
      <a href="<%= make_url_safe_for_html_attribute @user_to_edit.image %>"><%== @user_to_edit.image %></a><br/>
      <a href="<%= make_url_safe_for_html_attribute @user_to_edit.image %>">
        <img style="height:100px" src="<%= make_url_safe_for_html_attribute @user_to_edit.image %>"/>
      </a>
    <% else %>
      <em>none</em>
    <% end %>
  </dd>
  <dt>Last signed in:</dt>
  <dd><%= format_time @user_to_edit.last_signed_in_at %></dd>
  <dt>Created at:</dt>
  <dd><%= format_time @user_to_edit.created_at %></dd>
  <dt>Updated at:</dt>
  <dd><%= format_time @user_to_edit.updated_at %></dd>
  <dt>Monitoring net:</dt>
  <dd>
    <% if @user_to_edit.monitoring_net %>
      <a href="/admin/nets/<%= url_escape @user_to_edit.monitoring_net.name %>"><%== @user_to_edit.monitoring_net.name %></a>
    <% else %>
      <em>none</em>
    <% end %>
  </dd>
  <dt>Monitoring net last refreshed at:</dt>
  <dd>
    <% if @user_to_edit.monitoring_net_last_refreshed_at %>
      <%= format_time @user_to_edit.monitoring_net_last_refreshed_at %>
    <% else %>
      <em>none</em>
    <% end %>
  </dd>
  <dt>Logging net:</dt>
  <dd>
    <% if @user_to_edit.logging_net %>
      <a href="/admin/nets/<%= url_escape @user_to_edit.logging_net.name %>"><%== @user_to_edit.logging_net.name %></a>
      (last change <%== distance_of_time_in_words Time.now, @user_to_edit.logging_net.checkins.maximum(:updated_at) %> ago)
    <% else %>
      <em>none</em>
    <% end %>
  </dd>
  <dt>Flags:</dt>
  <dd><%== @user_to_edit.flags %></dd>
</dl>

<form action="/admin/users/<%= @user_to_edit.id %>" method="POST">
  <label>
    <input type="checkbox" name="admin" value="true" <%= @user_to_edit.admin? ? 'checked' : '' %>/>
    Admin
  </label>
  <label>
    <input type="checkbox" name="net_creation_blocked" value="true" <%= @user_to_edit.net_creation_blocked? ? 'checked' : '' %>/>
    Block net creation
  </label>
  <input type="submit" value="Save"/>
</form>

<a name="clubs"></a>
<h2>Clubs</h2>

<% if @club_members.any? %>
  <div class="table-wrapper">
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Full Name</th>
          <th>Joined</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <% @club_members.each do |club_member| %>
          <tr>
            <td><a href="/admin/clubs/<%== club_member.club_id %>/edit"><%== club_member.club.name %></a></td>
            <td><%== club_member.club.full_name %></td>
            <td><%= format_time(club_member.created_at) %></td>
            <td>
              <form class="inline" action="/admin/users/<%== @user_to_edit.id %>/clubs/<%== club_member.club_id %>" method="post" onclick="if (!confirm('Are you sure?')) return false">
                <input type="hidden" name="_method" value="delete"/>
                <button>Remove</button>
              </form>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
<% else %>
  <p><em>none</em></p>
<% end %>

<div id="club-search-form" style="position: relative;">
  <label>
    Search for club to add:<br/>
    <input type="text" id="club-search" placeholder="Type club name..." autocomplete="off" style="width: 300px;"/>
  </label>
  <div id="club-search-results" style="display: none; border: 1px solid #ccc; max-height: 200px; overflow-y: auto; background: white; position: absolute; z-index: 1000; width: 300px; box-shadow: 0 2px 5px rgba(0,0,0,0.2);"></div>
</div>

<script>
let searchTimeout;
const searchInput = document.getElementById('club-search');
const resultsDiv = document.getElementById('club-search-results');

searchInput.addEventListener('input', function() {
  clearTimeout(searchTimeout);
  const query = this.value.trim();

  if (query.length < 2) {
    resultsDiv.style.display = 'none';
    return;
  }

  searchTimeout = setTimeout(() => {
    fetch(`/admin/clubs/search?q=${encodeURIComponent(query)}`)
      .then(response => response.json())
      .then(clubs => {
        if (clubs.length === 0) {
          resultsDiv.innerHTML = '<div style="padding: 10px; color: #666;">No clubs found</div>';
        } else {
          resultsDiv.innerHTML = clubs.map(club =>
            `<div style="padding: 10px; cursor: pointer; border-bottom: 1px solid #eee;"
                  onclick="addUserToClub(${club.id}, '${escapeHtml(club.name)}')"
                  onmouseover="this.style.backgroundColor='#f5f5f5'"
                  onmouseout="this.style.backgroundColor='white'">
               <strong>${escapeHtml(club.name)}</strong>
               ${club.full_name ? `<br/><small>${escapeHtml(club.full_name)}</small>` : ''}
             </div>`
          ).join('');
        }
        resultsDiv.style.display = 'block';
      })
      .catch(error => {
        console.error('Search error:', error);
        resultsDiv.innerHTML = '<div style="padding: 10px; color: red;">Search error</div>';
        resultsDiv.style.display = 'block';
      });
  }, 300);
});

// Hide results when clicking outside
document.addEventListener('click', function(e) {
  if (!e.target.closest('#club-search-form')) {
    resultsDiv.style.display = 'none';
  }
});

function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

function addUserToClub(clubId, clubName) {
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = `/admin/users/<%== @user_to_edit.id %>/clubs`;

  const clubIdInput = document.createElement('input');
  clubIdInput.type = 'hidden';
  clubIdInput.name = 'club_id';
  clubIdInput.value = clubId;

  form.appendChild(clubIdInput);
  document.body.appendChild(form);
  form.submit();

  resultsDiv.style.display = 'none';
  searchInput.value = '';
}

function lookupQrz() {
  const btn = document.getElementById('qrz-lookup-btn');
  const loading = document.getElementById('qrz-loading');
  const infoDiv = document.getElementById('qrz-info');
  const contentDiv = document.getElementById('qrz-content');

  btn.disabled = true;
  loading.style.display = 'inline';
  infoDiv.style.display = 'none';

  fetch(`/admin/users/<%== @user_to_edit.id %>/qrz`)
    .then(response => {
      if (!response.ok) {
        return response.json().then(err => Promise.reject(err));
      }
      return response.json();
    })
    .then(station => {
      contentDiv.innerHTML = formatQrzInfo(station);
      infoDiv.style.display = 'block';
    })
    .catch(error => {
      contentDiv.innerHTML = `<div style="color: red;">Error: ${error.error || 'Unknown error occurred'}</div>`;
      infoDiv.style.display = 'block';
    })
    .finally(() => {
      btn.disabled = false;
      loading.style.display = 'none';
    });
}

function formatQrzInfo(station) {
  let html = '<dl>';

  if (station.call_sign) {
    html += `<dt>Call Sign:</dt><dd><strong>${escapeHtml(station.call_sign)}</strong></dd>`;
  }

  if (station.first_name || station.last_name) {
    const name = [station.first_name, station.last_name].filter(Boolean).join(' ');
    html += `<dt>Name:</dt><dd>${escapeHtml(name)}</dd>`;
  }

  if (station.nickname) {
    html += `<dt>Nickname:</dt><dd>${escapeHtml(station.nickname)}</dd>`;
  }

  if (station.license_class) {
    html += `<dt>License Class:</dt><dd>${escapeHtml(station.license_class)}</dd>`;
  }

  if (station.license_date) {
    html += `<dt>Licensed Since:</dt><dd>${escapeHtml(station.license_date)}</dd>`;
  }

  if (station.expiry_date) {
    html += `<dt>License Expires:</dt><dd>${escapeHtml(station.expiry_date)}</dd>`;
  }

  if (station.previous_call) {
    html += `<dt>Previous Call:</dt><dd>${escapeHtml(station.previous_call)}</dd>`;
  }

  if (station.aliases) {
    html += `<dt>Aliases:</dt><dd>${escapeHtml(station.aliases)}</dd>`;
  }

  if (station.trustee) {
    html += `<dt>Trustee:</dt><dd>${escapeHtml(station.trustee)}</dd>`;
  }

  if (station.street || station.city || station.state || station.zip) {
    const addressParts = [];
    if (station.street) addressParts.push(escapeHtml(station.street));

    const cityState = [station.city, station.state].filter(Boolean).join(', ');
    if (cityState) addressParts.push(escapeHtml(cityState));

    if (station.zip) addressParts.push(escapeHtml(station.zip));

    const address = addressParts.join('<br/>');
    html += `<dt>Address:</dt><dd>${address}</dd>`;
  }

  if (station.county) {
    html += `<dt>County:</dt><dd>${escapeHtml(station.county)}</dd>`;
  }

  if (station.country) {
    html += `<dt>Country:</dt><dd>${escapeHtml(station.country)}</dd>`;
  }

  if (station.dxcc) {
    html += `<dt>DXCC:</dt><dd>${escapeHtml(station.dxcc)}</dd>`;
  }

  if (station.cqzone) {
    html += `<dt>CQ Zone:</dt><dd>${escapeHtml(station.cqzone)}</dd>`;
  }

  if (station.ituzone) {
    html += `<dt>ITU Zone:</dt><dd>${escapeHtml(station.ituzone)}</dd>`;
  }

  if (station.grid_square) {
    html += `<dt>Grid Square:</dt><dd>${escapeHtml(station.grid_square)}</dd>`;
  }

  if (station.born) {
    html += `<dt>Born:</dt><dd>${escapeHtml(station.born)}</dd>`;
  }

  if (station.qsl_manager) {
    html += `<dt>QSL Manager:</dt><dd>${escapeHtml(station.qsl_manager)}</dd>`;
  }

  if (station.email) {
    html += `<dt>Email:</dt><dd><a href="mailto:${escapeHtml(station.email)}">${escapeHtml(station.email)}</a></dd>`;
  }

  if (station.url) {
    html += `<dt>Website:</dt><dd><a href="${escapeHtml(station.url)}" target="_blank">${escapeHtml(station.url)}</a></dd>`;
  }

  if (station.views) {
    html += `<dt>QRZ Page Views:</dt><dd>${escapeHtml(station.views)}</dd>`;
  }

  if (station.eqsl === '1') {
    html += `<dt>eQSL:</dt><dd>Yes</dd>`;
  }

  if (station.lotw === '1') {
    html += `<dt>LoTW:</dt><dd>Yes</dd>`;
  }

  if (station.mqsl === '1') {
    html += `<dt>Paper QSL:</dt><dd>Yes</dd>`;
  }

  if (station.iota) {
    html += `<dt>IOTA:</dt><dd>${escapeHtml(station.iota)}</dd>`;
  }

  if (station.moddate) {
    html += `<dt>Last Updated:</dt><dd>${escapeHtml(station.moddate)}</dd>`;
  }

  if (station.image) {
    html += `<dt>Photo:</dt><dd><img src="${escapeHtml(station.image)}" alt="QRZ Photo" style="max-width: 200px; max-height: 200px;"/></dd>`;
  }

  html += '</dl>';

  html += `<p style="margin-top: 15px; font-size: smaller; color: #666;">
    Data from <a href="https://www.qrz.com/db/${escapeHtml(station.call_sign)}" target="_blank">QRZ.com</a>
  </p>`;

  // Add map if grid square is available
  if (station.grid_square) {
    html += `<div id="qrz-map" style="height: 300px; margin: 15px 0; border: 1px solid #ccc;"></div>`;
  }

  // Initialize map after content is added to DOM
  if (station.grid_square && station.latitude && station.longitude) {
    setTimeout(() => initQrzMap(station.latitude, station.longitude, station.call_sign, station.grid_square), 100);
  }

  return html;
}

function initQrzMap(latitude, longitude, callSign, gridSquare) {
  // Create map
  const map = L.map('qrz-map').setView([latitude, longitude], 8);

  // Add tile layer
  L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
  }).addTo(map);

  // Add marker
  const marker = L.marker([latitude, longitude]).addTo(map);
  marker.bindPopup(`<strong>${escapeHtml(callSign)}</strong><br/>Grid: ${escapeHtml(gridSquare)}`).openPopup();
}
</script>
